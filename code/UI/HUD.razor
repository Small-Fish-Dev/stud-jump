@using Sandbox.UI

@namespace Stud
@inherits RootPanel

<style>
    HUD {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        pointer-events: all;
        cursor: default;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        position: absolute;
    }
    
    .heightCount {
        width: 100%;
        height: 100%;
        color: white;
        font-family: 'Comic Sans MS', serif;
        font-size: 128px;
        text-stroke: 6px black;
        text-shadow: 4px 4px 10px black;
        text-align: center;
        justify-content: center;
        align-content: center;
    
        Label {
            border-radius: 50px;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }
    }
    
    Nameplate {
        position: absolute;
        text-align: center;
        justify-content: center;
        font-family: 'Comic Sans MS', serif;
        color: white;
        font-size: 48px;
        text-stroke: 4px black;
        text-shadow: 4px 4px 5px black;
    
        .avatar {
            border-radius: 50%;
            top: 16px;
            width: 48px;
            aspect-ratio: 1;
            background-size: 100%;
            border: 2px black;
        }
    
        .name {
            padding-left: 10px;
        }
    
        .rank {
            position: absolute;
            width: 100%;
            font-size: 20px;
            bottom: 0;
        }
    }
    
    ExperienceBar {
        position: absolute;
        background-image: url(ui/line.png);
        background-size: 60px;
        background-color: rgb( 40, 40, 60, 0.8 );
        top: 20px;
        height: 25px;
        width: 40%;
        border-radius: 50px;
        border: 5px solid rgb( 40, 40, 60 );
        color: white;
        font-family: 'Comic Sans MS', serif;
        font-size: 22px;
        text-stroke: 4px black;
        text-shadow: 2px 2px 4px black;
    
        .bar {
            position: absolute;
            background-position: left;
            background-size: 100px 100%;
            border-radius: 50px;
            height: 100%;
            z-index: 4;
            //transition: all 0.3s ease-out;
            z-index: 1;
    
            .grid {
                position: absolute;
                background-image: url(ui/line.png);
                background-size: 60px;
                opacity: 0.3;
                height: 100%;
                width: 100%;
                z-index: 2;
            }
        }
    
        .currentRank {
            position: absolute;
            text-align: left;
            top: 30px;
        }
    
        .nextRank {
            position: absolute;
            left: 100%;
            text-align: right;
            transform: translateX( -100% );
            top: 30px;
        }
    }
    
    StarParticle {
        position: absolute;
        background-image: url(ui/star_particle.png);
        background-size: 100%;
        background-repeat: no-repeat;
        opacity: 1;
        height: 40px;
        aspect-ratio: 1;
    }
    
    MuteButton {
        position: absolute;
        right: 15px;
        top: 15px;
        height: 32px;
        aspect-ratio: 1;
        background-size: contain;
        background-image: url(ui/muted.png);
        background-image: url(ui/unmuted.png);
        cursor: pointer;
    }
    
    Chat {
        position: absolute;
        width: 500px;
        height: 350px;
        left: 20px;
        top: 20px;
        background-color: rgba(black, 0.8);
        border-radius: 10px;
        font-family: 'Comic Sans MS', serif;
        font-size: 18px;
        font-weight: bold;
        text-stroke: 3px black;
        text-shadow: 2px 2px 2px black;
        transition: opacity 0.5s ease-in;
        box-shadow: 0px 0px 4px 4px rgba(0, 0, 0, 0.2);
    
        .container {
            position: absolute;
            top: 10px;
            width: 480px;
            height: 280px;
            left: 10px;
            flex-direction: column;
            overflow: scroll;
            justify-content: flex-end;
    
            .textContainer {
                flex-wrap: wrap;
                flex-direction: row;
                flex-shrink: 0;
                flex-grow: 0;
                padding-bottom: 5px;
            }
        }
    
        .entry {
            position: absolute;
            width: 480px;
            bottom: 10px;
            left: 10px;
            border-radius: 4px;
            border-top: 2px rgb(80, 80, 80);
            border-left: 1px rgb(80, 80, 80);
            border-right: 1px rgb(80, 80, 80);
            background-color: rgb(40, 40, 40);
            color: rgb(200, 200, 200);
            padding: 8px;
        }
    }
    
    
    AdminCommands {
        position: absolute;
        width: 300px;
        height: 400px;
        right: 20px;
        top: 80px;
        background-color: rgba(0, 0, 0, 0.8);
        border-radius: 10px;
        font-family: 'Comic Sans MS', serif;
        font-size: 22px;
        font-weight: bold;
        color: white;
        text-stroke: 3px black;
        text-shadow: 2px 2px 2px black;
        transition: opacity 0.5s ease-in;
        box-shadow: 0px 0px 4px 4px rgba(0, 0, 0, 0.2);
        opacity: 0.6;
    
        .container {
            display: flex;
            position: absolute;
            width: 100%;
            height: 100%;
            flex-direction: column;
            justify-content: flex-start;
            align-items: center;
            text-align: center;
    
            .title {
                align-items: center;
                height: 40px;
                width: 100%;
                background-color: rgba( 20, 20, 40, 0.8 );
                border-radius: 10px 10px 0px 0px;
            }
    
            .button {
                height: 40px;
                padding: 15px;
                margin-top: 10px;
                margin-bottom: 10px;
                background-color: rgba( 160, 160, 180, 1 );
                border-radius: 15px;
                border: 1px solid rgba( 220, 220, 220, 1 );
                transition: opacity 0.2s ease-in;
                align-items: center;
                text-align: center;
                justify-content: center;
                font-size: 20px;
                opacity: 0.6;
                cursor: pointer;
    
                &:hover {
                    opacity: 1;
                }
            }
        }
    
        &:hover {
            opacity: 0.8;
        }
    }
    
    Jumpscare {
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        width: 100%;
        background-image: url(ui/stan.png);
        background-size: cover;
        z-index: 99999;
        pointer-events: none;
    }
</style>

<root>
    <ExperienceBar></ExperienceBar>
    <MuteButton></MuteButton>
    <Chat></Chat>
</root>

@code {

    public static HUD Instance { get; set; }

    public HUD()
    {
        Instance = this;
    }

    [Event.Hotload]
    private static void createHUD()
    {
        if ( Sandbox.Game.IsServer ) return;

        Instance?.Delete();

        Instance = new HUD();
    }

    [Event("jumpscare")]
    private void AddJumpscare()
    {

        AddChild( new Jumpscare() );

    }

    private Panel adminMenu;

    [Event( "addAdminMenu" )]
    private void AddAdminMenu()
    {

        adminMenu = AddChild<AdminCommands>();

    }

    [Event( "reset" )]
    private void AdminReset()
    {

        adminMenu.Delete();

    }

    public override void Tick()
    {
        base.Tick();

        /*if (!Input.Down("LockMouse"))
        {
            Style.PointerEvents = PointerEvents.All;
            Style.Dirty();
        }*/
        DebugOverlay.ScreenText($"{Style.PointerEvents} {(Input.Down("LockMouse"))}");
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        base.OnMouseDown(e);

        /*if ((e.MouseButton & MouseButtons.Right) != 0)
        {
            Style.PointerEvents = PointerEvents.None;
            Style.Dirty();
            Log.Info("with the creeper with the creeper");
        }*/
    }

    [ConCmd.Admin()]
    static void LockMouse(bool l)
    {
        Instance.Style.PointerEvents = l ? PointerEvents.All : PointerEvents.None;
    }

}
